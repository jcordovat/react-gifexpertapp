{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCLdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGvC,OACE,yBAAKC,UAAU,4DACb,2BAAIF,GACJ,yBAAKG,IAAKF,EAAKG,IAAKJ,M,uBCRbK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAKFG,MAAMR,GALJ,cAKfS,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAGFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBf,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOe,EAAa,EAAbA,OAClC,MAAO,CACLhB,GAAIA,EACJC,MAAOA,EACPC,IAAG,OAAEc,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBf,QAbb,kBAgBdY,GAhBc,4CAAH,sDCIPI,EAAU,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNM,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACC,GACtBH,EAAS,CACPR,KAAMW,EACNL,SAAS,SAGZ,CAACZ,IAEGa,EDfmBK,CAAalB,GAA/BM,EAD+B,EAC/BA,KAAMM,EADyB,EACzBA,QAEd,OACE,oCACGA,GACC,uBAAGhB,UAAU,oDAAb,eAIF,4BAAKI,GACL,yBAAKJ,UAAU,mEACZU,EAAKE,KAAI,SAACW,GACT,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAI1B,IAAQ0B,UEYhCE,EAzBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KASzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG4C,EAAWd,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASoB,IAAKpB,EAAUA,SAAUA,UChB5CuB,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.ba0047dd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  //console.log({ id, title, url });\n\n  return (\n    <div className=\"card animate__animated animate__bounce animate__delay-2s\">\n      <p>{title}</p>\n      <img src={url} alt={title} />\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=DeimbMFoUVpI7Yyue3ME3fO2NdPV3GWM`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  //console.log(data);\n\n  const gifs = data.map(({ id, title, images }) => {\n    return {\n      id: id,\n      title: title,\n      url: images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n  //setImages(gifs);\n  //console.log(gifs);\n};\n","import React from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      {loading && (\n        <p className=\"animate__animated animate__bounce animate__flash\">\n          Cargando...\n        </p>\n      )}\n      <h3>{category}</h3>\n      <div className=\"card-grid animate__animated animate__bounce animate__rubberBand\">\n        {data.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\n//para crear mi funcion con el snipet rafc\n\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setstate({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One Punch\"]);\n\n  //   const handleAdd = () => {\n  //     const nuevaCategoria = \"Naruto\";\n  //     //setCategorias([...categorias, nuevaCategoria]);\n  //     setCategorias((cats) => [...cats, nuevaCategoria]);\n  //   };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n          // <li key={category}>{category} </li>\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}